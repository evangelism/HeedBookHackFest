
@{
    ViewData["Title"] = "Online";
}


<div class="content">
    <div class="row">
        <div class="col-md-12">
            <div class="hpanel">
                <video id="gum" autoplay muted width="800" height="600"></video>
                <video id="recorded" autoplay loop></video>
                <div>
                    <a onclick="takephoto();" id="takephotoimg" download="my-file-name.png">Take Photo</a>
                    <button id="downloadphoto">Download Photo</button>
                    <button id="record">Start Recording</button>
                    <button id="play" disabled>Play</button>
                    <button id="download" disabled>Download</button>
                    <button id="downloadaudio" disabled>Download Audio</button>
                    <button id="ws">WS Connection</button>
                </div>
                <canvas id="canvas" width="800" height="600" ></canvas>
            </div>
        </div>
    </div>
</div>


@section Styles {
    <environment names="Development,Staging,Production">
                     
    </environment>
}


@section Scripts {
    <environment names="Development,Staging,Production">
        <script src="~/js/mediarecorder.js"></script>
        <script src="~/js/azure-storage.common.min.js"></script>
        <script src="~/js/azure-storage.blob.min.js"></script>

        <script>
            // Provides a Stream for a file in webpage, inheriting from NodeJS Readable stream.
            var Stream = require('stream');
            var util = require('util');
            var Buffer = require('buffer').Buffer;

            function FileStream(file, opt) {
                Stream.Readable.call(this, opt);

                this.fileReader = new FileReader(file);
                this.file = file;
                this.size = file.size;
                this.chunkSize = 1024 * 1024 * 4; // 4MB
                this.offset = 0;
                var _me = this;

                this.fileReader.onloadend = function loaded(event) {
                    var data = event.target.result;
                    var buf = Buffer.from(data);
                    _me.push(buf);
                }
            }
            util.inherits(FileStream, Stream.Readable);
            FileStream.prototype._read = function () {
                if (this.offset > this.size) {
                    this.push(null);
                } else {
                    var end = this.offset + this.chunkSize;
                    var slice = this.file.slice(this.offset, end);
                    this.fileReader.readAsArrayBuffer(slice);
                    this.offset = end;
                }
            };
        </script>

        <script>
            var account = 'heedbookhackfest';
            var sas = '';
            var container = 'frames';
            var blobUri = '';

            function checkParameters() {

                if (account == null || account.length < 1) {
                    alert('Please enter a valid storage account name!');
                    return false;
                }
                if (sas == null || sas.length < 1) {
                    alert('Please enter a valid SAS Token!');
                    return false;
                }

                return true;
            }

            function getBlobService() {

                if (!checkParameters())
                    return null;

                blobUri = 'https://' + account + '.blob.core.windows.net';
                var blobService = AzureStorage.createBlobServiceWithSas(blobUri, sas).withFilter(new AzureStorage.ExponentialRetryPolicyFilter());
                return blobService;
            }

            function uploadBlobByStream(checkMD5) {
                
                //взять всё и засунуть в FileStream

                var client = new HttpClient();
                client.get('http://heedbookwebapptest.azurewebsites.net/blob/BlobSas', function (response) {

                    sas = response.toString();

                    var blobService = getBlobService();
                    if (!blobService)
                        return;
                    
                    var fileStream = new FileStream(file);

                    // Make a smaller block size when uploading small blobs
                    var blockSize = file.size > 1024 * 1024 * 32 ? 1024 * 1024 * 4 : 1024 * 512;
                    var options = {
                        storeBlobContentMD5: checkMD5,
                        blockSize: blockSize
                    };
                    blobService.singleBlobPutThresholdInBytes = blockSize;

                    var finishedOrError = false;
                    var speedSummary = blobService.createBlockBlobFromStream(container, file.name, fileStream, file.size, options, function (error, result, response) {
                        finishedOrError = true;
                        if (error) {
                            alert('Upload filed, open brower console for more detailed info.');
                            console.log(error);
                        } else {
                            displayProcess(100);
                            setTimeout(function () { // Prevent alert from stopping UI progress update
                                alert('Upload successfully!');
                            }, 1000);
                        }
                    });

                   

                });

         </script>
    </environment>

}


